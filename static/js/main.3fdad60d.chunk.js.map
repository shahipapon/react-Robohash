{"version":3,"sources":["Robot_App/components/Card.js","Robot_App/components/CardList.js","Robot_App/components/SearchBox.js","Robot_App/components/Scroll.js","Robot_App/containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","alt","src","height","width","CardList","robots","map","user","i","key","SearchBox","searchfield","search_Change","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","App","onsearchChange","event","setState","target","value","state","fetch","then","response","json","users","filter_Robots","this","filter","robot","toLocaleLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOA2BeA,G,MAxBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAQxB,OACE,yBAAKC,UAAU,oDACb,6BACE,yBACEC,IAAI,SACJC,IAAG,+BAA0BJ,GAC7BK,OAAO,MACPC,MAAM,QAER,4BAAKP,GACL,2BAAIE,OCDGM,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAIQ,EAAOG,GAAGX,GACdD,KAAMS,EAAOG,GAAGZ,KAChBE,MAAOO,EAAOG,GAAGV,aCCdY,EAZG,SAAC,GAAmC,EAAjCC,YAAkC,IAArBC,EAAoB,EAApBA,cAChC,OACE,yBAAKb,UAAU,OACb,2BACEA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCQHI,EAdA,SAAAC,GACb,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRlB,OAAQ,UAGTe,EAAMI,WC0CEC,E,YA7Cb,aAAe,IAAD,8BACZ,+CASFC,eAAiB,SAAAC,GAGf,EAAKC,SAAS,CAAEd,YAAaa,EAAME,OAAOC,SAX1C,EAAKC,MAAQ,CAEXvB,OAAQ,GACRM,YAAa,KALH,E,iFAgBO,IAAD,OAClBkB,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKR,SAAS,CAAEpB,OAAQ4B,S,+BAKpB,IAAD,OACDC,EAAgBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAC7C,OAAOA,EAAMzC,KACV0C,oBACAC,SAAS,EAAKX,MAAMjB,YAAY2B,wBAErC,OACE,yBAAKvC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWa,cAAeuB,KAAKZ,iBAC/B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlB,OAAQ6B,U,GAvCVM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.3fdad60d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ name, id, email }) => {\n  /* \n  const Card = (proprs) => {\n    // for this <h2>{props.name}</h2>\n  const { name, id, email} = props;\n    // tfor this:  <h2>{name}</h2>\n */\n\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <div>\n        <img\n          alt=\"robots\"\n          src={`https://robohash.org/${id}`}\n          height=\"200\"\n          width=\"200\"\n        />\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n{\n  /*  <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\"> */\n}\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nconst SearchBox = ({ searchfield, search_Change }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={search_Change}\n      />\n    </div>\n  );\n};\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport { robots } from \"../robots\";\nimport SearchBox from \"../components/SearchBox\";\n//import json from \"../data.json\";\nimport Scroll from \"../components/Scroll\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // robots: robots,\n      robots: [],\n      searchfield: \" \"\n    };\n  }\n\n  //onsearchChange(event) { // this will cant  read state.  use es6 function.  beacuse without this setstate wont work\n  onsearchChange = event => {\n    // console.log(event.target.value);\n\n    this.setState({ searchfield: event.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => {\n        return response.json();\n      })\n      .then(users => {\n        this.setState({ robots: users });\n        //  console.log(\"total data: \" + Object.keys(json).length);\n        // console.log(\"total data: last \" + json[9594].name);\n      });\n  }\n  render() {\n    const filter_Robots = this.state.robots.filter(robot => {\n      return robot.name\n        .toLocaleLowerCase()\n        .includes(this.state.searchfield.toLocaleLowerCase());\n    });\n    return (\n      <div className=\"tc\">\n        <h1>RoboFriends</h1>\n        <SearchBox search_Change={this.onsearchChange} />\n        <Scroll>\n          <CardList robots={filter_Robots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Robot_App/containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import Card from \"./Robot_App/Card\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n{\n  /*\n<div>\n \n  manually....\n  \n  <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n  <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n  <Card id={robots[2].id} name={robots[1].name} email={robots[2].email} /> \n\n  \n</div>\n*/\n}\n"],"sourceRoot":""}